name: Multi-Platform Build

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # 轻量级工具构建 (Gemini-STT和工具脚本)
  build-light-tools:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64 build
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          # Linux ARM64 build (官方支持，2025年1月公共仓库免费)
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          # Windows builds
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          # macOS builds
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.setup_python_arch }}

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller requests urllib3 tqdm huggingface_hub pyyaml

      - name: Build gemini-stt
        run: |
          pyinstaller --onefile --hidden-import=requests,urllib3,json,argparse,mimetypes,datetime,sys,os,time,re --strip gemini-stt.py --distpath dist/${{ matrix.platform }}

      - name: Build convert_whisper
        run: |
          pyinstaller --onefile --hidden-import=huggingface_hub,tqdm,shutil,pathlib,argparse,os --strip tools/convert_whisper.py --distpath dist/${{ matrix.platform }}

      - name: Build get_Pyannote_model
        run: |
          pyinstaller --onefile --hidden-import=huggingface_hub,yaml,shutil,subprocess,pathlib,argparse,os,sys --strip tools/get_Pyannote_model.py --distpath dist/${{ matrix.platform }}

      # 单独上传每个轻量级工具 (文件名_py-架构-版本号)
      - name: Upload gemini-stt
        uses: actions/upload-artifact@v4
        with:
          name: gemini-stt_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/gemini-stt*
          compression-level: 0

      - name: Upload convert_whisper
        uses: actions/upload-artifact@v4
        with:
          name: convert_whisper_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/convert_whisper*
          compression-level: 0

      - name: Upload get_Pyannote_model
        uses: actions/upload-artifact@v4
        with:
          name: get_Pyannote_model_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/get_Pyannote_model*
          compression-level: 0

  # STT主程序构建 (重型依赖)
  build-stt:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64 build
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          # Linux ARM64 build (官方支持，2025年1月公共仓库免费)
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          # Windows builds
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          # macOS builds
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.setup_python_arch }}

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev libasound2-dev portaudio19-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install portaudio

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller numpy soundfile faster-whisper pyyaml
          # 对于非ARM Linux，安装torch和相关依赖
          if [[ "${{ matrix.platform }}" != "linux-arm64" ]]; then
            # 使用CPU版本的torch以确保兼容性和减小包大小
            python -m pip install torch torchaudio --index-url https://download.pytorch.org/whl/cpu
            python -m pip install ctranslate2
            # 尝试安装pyannote.audio，失败时继续
            python -m pip install pyannote.audio==3.1.1 || echo "Warning: pyannote.audio installation failed, continuing..."
          else
            echo "Skipping torch/pyannote for ARM64 Linux due to compatibility issues"
            echo "ARM64 Linux build will have limited functionality (no speaker diarization)"
          fi

      - name: Build STT
        run: |
          # 根据平台调整隐藏导入
          if [[ "${{ matrix.platform }}" != "linux-arm64" ]]; then
            # 完整版本（包含所有依赖）
            pyinstaller --onefile --hidden-import=faster_whisper,soundfile,numpy,ctranslate2,pyannote.audio,torch,torchaudio,yaml,tempfile,pathlib,typing,io,logging,argparse,json,datetime,time,os,sys,subprocess,shutil --strip stt.py --distpath dist/${{ matrix.platform }}
          else
            # ARM64简化版本（无torch/pyannote支持）
            pyinstaller --onefile --hidden-import=faster_whisper,soundfile,numpy,yaml,tempfile,pathlib,typing,io,logging,argparse,json,datetime,time,os,sys,subprocess,shutil --strip stt.py --distpath dist/${{ matrix.platform }}
          fi

      - name: Upload STT
        uses: actions/upload-artifact@v4
        with:
          name: stt_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/*
          compression-level: 0

  # 同平台全套工具打包 (SKY-STT-all)
  create-platform-bundles:
    needs: [build-light-tools, build-stt]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: [linux-x64, linux-arm64, windows-x64, macos-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载该平台的所有工具
      - name: Download light tools for platform
        uses: actions/download-artifact@v4
        with:
          pattern: "*_py-${{ matrix.platform }}-*"
          path: platform-bundle/
          merge-multiple: true

      - name: Download STT for platform
        uses: actions/download-artifact@v4
        with:
          name: stt_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: platform-bundle/

      # 上传平台全套包 (ALL-仓库名字-架构-版本号)
      - name: Upload SKY-STT Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: ALL-SKY-STT-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: platform-bundle/*
          compression-level: 0

  # 全平台合集打包
  create-release-bundle:
    needs: [create-platform-bundles]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载所有ALL-SKY-STT平台包
      - name: Download all ALL-SKY-STT platform bundles
        uses: actions/download-artifact@v4
        with:
          pattern: ALL-SKY-STT-*
          path: release-bundle/
          merge-multiple: false

      # 创建完整发布包
      - name: Create complete release bundle
        run: |
          mkdir -p complete-release
          # 重新组织目录结构
          for platform in linux-x64 linux-arm64 windows-x64 macos-arm64; do
            mkdir -p "complete-release/$platform"
            
            # 复制ALL-SKY-STT平台包 (包含所有4个工具)
            if [ -d "release-bundle/ALL-SKY-STT-$platform-${{ steps.version.outputs.version }}" ]; then
              cp -r "release-bundle/ALL-SKY-STT-$platform-${{ steps.version.outputs.version }}/"* "complete-release/$platform/"
            fi
          done

      - name: Upload Complete Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: FULL-SKY-STT-${{ steps.version.outputs.version }}
          path: complete-release/*
          compression-level: 0

  # Release发布 (仅在release触发时执行)
  publish-release:
    if: github.event_name == 'release'
    needs: [create-release-bundle]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载所有单独程序artifacts
      - name: Download all single program artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*_py-*"
          path: release-assets/single/
          merge-multiple: false

      # 下载完整发布包
      - name: Download complete release bundle
        uses: actions/download-artifact@v4
        with:
          name: FULL-SKY-STT-${{ steps.version.outputs.version }}
          path: release-assets/complete/

      # 创建平台ZIP包 (统一ZIP格式，避免双重压缩)
      - name: Create platform-specific archives
        run: |
          cd release-assets/complete
          for platform in linux-x64 linux-arm64 windows-x64 macos-arm64; do
            if [ -d "$platform" ]; then
              zip -r "../sky-stt-$platform-${{ steps.version.outputs.version }}.zip" "$platform"/*
            fi
          done

      # 上传到Release (统一ZIP格式)
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*.zip
          name: "SKY-STT Release ${{ steps.version.outputs.version }}"
          body: |
            ## SKY-STT Multi-Platform Release ${{ steps.version.outputs.version }}
            
            ### 📦 支持的平台
            - **Linux x64**: `sky-stt-linux-x64-${{ steps.version.outputs.version }}.zip`
            - **Linux ARM64**: `sky-stt-linux-arm64-${{ steps.version.outputs.version }}.zip`
            - **Windows x64**: `sky-stt-windows-x64-${{ steps.version.outputs.version }}.zip`
            - **macOS ARM64**: `sky-stt-macos-arm64-${{ steps.version.outputs.version }}.zip`
            
            ### 🛠️ 包含工具
            - **stt**: 主STT引擎，基于FasterWhisper + Pyannote，支持本地语音识别和说话人分割
            - **gemini-stt**: 基于Google Gemini API的云端STT引擎，支持音频和视频文件
            - **convert_whisper**: Whisper模型转换工具，自动下载并转换为faster-whisper格式
            - **get_Pyannote_model**: Pyannote模型管理工具，一键下载和配置说话人分割模型
            
            每个压缩包包含对应平台的所有4个工具的可执行文件。
          tag_name: ${{ github.ref }}